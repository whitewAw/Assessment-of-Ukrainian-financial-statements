@page "/solvencyratios"
@inject SolvencyRatios SolvencyRatios

<RadzenCard Style="width: 100%;" aria-label="@tableName">
    <h2 class="text-center mb-4">@tableName</h2>

    <div class="table-responsive">
        <table class="table table-bordered table-sm table-striped table-hover"
               role="table"
               aria-label="@tableAriaLabel">
            <thead class="table-light">
                <tr>
                    <ThComponent Rowspan="2">@ResLoc["NumberInOrder"]</ThComponent>
                    <ThComponent Rowspan="2">@ResLoc["Indicators"]</ThComponent>
                    <ThComponent Colspan="2">@MainModel.BaseYear @ResLoc["year"]</ThComponent>
                    <ThComponent Colspan="2">@MainModel.CurrentYear @ResLoc["year"]</ThComponent>
                    <ThComponent Colspan="2">@ResLoc["Deviation_"] (+,-)</ThComponent>
                </tr>
                <tr>
                    <ThComponent>@ResLoc["atBeginOfYear"]</ThComponent>
                    <ThComponent>@ResLoc["atEndOfYear"]</ThComponent>
                    <ThComponent>@ResLoc["atBeginOfYear"]</ThComponent>
                    <ThComponent>@ResLoc["atEndOfYear"]</ThComponent>
                    <ThComponent>@MainModel.BaseYear @ResLoc["year"]</ThComponent>
                    <ThComponent>@MainModel.CurrentYear @ResLoc["year"]</ThComponent>
                </tr>
            </thead>
            <tbody>
                @{
                    var rows = new[]
                    {
                        (Item: SolvencyRatios.OverallLiquidityRatio, Label: ResLoc["OverallLiquidityRatio"]),
                        (Item: SolvencyRatios.AbsoluteLiquidityRatio, Label: ResLoc["AbsoluteLiquidityRatio"]),
                        (Item: SolvencyRatios.IntermediateCoverageRatio, Label: ResLoc["IntermediateCoverageRatio"]),
                        (Item: SolvencyRatios.CurrentLiquidityFactor, Label: ResLoc["CurrentLiquidityFactor"])
                    };
                }

                @foreach (var row in rows)
                {
                    <TrSolvencyRatiosComponent Item="@row.Item" @key="@row.Item.Number">
                        @row.Label
                    </TrSolvencyRatiosComponent>
                }

                <tr>
                    <TdComponent Align="ML">@SolvencyRatios.SolvencyRecoveryRatio.Number</TdComponent>
                    <TdComponent Align="ML">@ResLoc["SolvencyRecoveryRatio"]</TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(SolvencyRatios.SolvencyRecoveryRatio.BaseEnd, 3)
                    </TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(SolvencyRatios.SolvencyRecoveryRatio.CurrentEnd, 3)
                    </TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(GetDifference(SolvencyRatios.SolvencyRecoveryRatio), 3)
                    </TdComponent>
                </tr>

                <tr>
                    <TdComponent Align="ML">@SolvencyRatios.SolvencyLossRatio.Number</TdComponent>
                    <TdComponent Align="ML">@ResLoc["SolvencyLossRatio"]</TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(SolvencyRatios.SolvencyLossRatio.BaseEnd, 3)
                    </TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(SolvencyRatios.SolvencyLossRatio.CurrentEnd, 3)
                    </TdComponent>
                    <TdComponent Spacing="pr-2" Colspan="2">
                        @Constraints.RoundStr(GetDifference(SolvencyRatios.SolvencyLossRatio), 3)
                    </TdComponent>
                </tr>
            </tbody>
        </table>
    </div>
</RadzenCard>

@code {
    private string? tableName;
    private string tableAriaLabel => ResLoc?["SolvencyRatiosTable"] ?? "Solvency Ratios Table";

    protected override void OnInitialized()
    {
        string name = ResLoc["SolvencyRatios"];
        const int tableNumber = 14;

        tableName = string.Format("{0} {1}. {2} {3} {4}-{5} {6}",
                                  ResLoc["Table"],
                                  tableNumber,
                                  name,
                                  MainModel.CompanyName,
                                  MainModel.BaseYear,
                                  MainModel.CurrentYear,
                                  ResLoc["years"]);

        base.OnInitialized();
    }

    private static double GetDifference(SolvencyRatiosRow item) => item.CurrentEnd - item.BaseEnd;
}